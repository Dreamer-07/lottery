server:
  port: 8083

spring:
  shardingsphere:
    datasource:
      names: ds0,ds1
      ds0:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/lottery?useSSL=false
        username: root
        password: 123456
      ds1:
        type: com.zaxxer.hikari.HikariDataSource
        driver-class-name: com.mysql.jdbc.Driver
        jdbc-url: jdbc:mysql://localhost:3306/lottery_2?useSSL=false
        username: root
        password: 123456
    rules:
      sharding:
        # 配置分片算法
        sharding-algorithms:
          alg_hash:
            type: HASH_MOD
            props:
              sharding-count: 2
        # 配置分布式序列算法
        key-generators:
          alg_snowflake:
            type: SNOWFLAKE
        tables:
          user_strategy_export:
            # 配置表的数据源分片信息
            actual-data-nodes: ds$->{0..1}.user_strategy_export00$->{0..1}
            # 配置分库策略
            database-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: alg_hash
            # 配置分表策略
            table-strategy:
              standard:
                sharding-column: order_id
                sharding-algorithm-name: alg_hash
            # 分布式序列配置
            key-generate-strategy:
              column: id
              key-generator-name: alg_snowflake
    props:
      # 打印 sql
      sql-show: true

  kafka:
    bootstrap-servers: 127.0.0.1:9092
    producer:
      # 发生错误后，消息重发的次数。
      retries: 1
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 1
    consumer:
      # 自动提交的时间间隔 在spring boot 2.X 版本中这里采用的是值的类型为Duration 需要符合特定的格式，如1S,1M,2H,5D
      auto-commit-interval: 1S
      # 该属性指定了消费者在读取一个没有偏移量的分区或者偏移量无效的情况下该作何处理：
      # latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）
      # earliest ：在偏移量无效的情况下，消费者将从起始位置读取分区的记录
      auto-offset-reset: earliest
      # 是否自动提交偏移量，默认值是true,为了避免出现重复数据和数据丢失，可以把它设置为false,然后手动提交偏移量
      enable-auto-commit: false
      # 键的反序列化方式
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      # 值的反序列化方式
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      group-id: lottery
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      #listner负责ack，每调用一次，就立即commit
      ack-mode: manual_immediate
      missing-topics-fatal: false


  redis:
    host: localhost
    port: 6379
    password: 123456
    database: 0
    lettuce:
      pool:
        max-idle: 16
        max-active: 32
        min-idle: 8

mybatis-plus:
  mapper-locations: classpath:/mapper/*.xml
  configuration:
    map-underscore-to-camel-case: true
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl

dubbo:
  application:
    name: lottery
    version: 1.0.0
    parameters:
      unicast: false
  registry:
    address: zookeeper://127.0.0.1:2181
    timeout: 30000
    protocol: zookeeper
  # 配置的协议和端口
  protocol:
    name: dubbo
    port: 20880
  scan:
    base-packages: pers.prover07.lottery.rpc

#db-router:
#  databases: db00
#  datasource:
#    db00:
#      username: root
#      password: 123456
#      url: jdbc:mysql://127.0.0.1:3306/lottery?useSSL=false&serverTimezone=UTC
#      driver-class-name: com.mysql.cj.jdbc.Driver
#  tables:
#    activity:
#      table-strategy:
#        column: id